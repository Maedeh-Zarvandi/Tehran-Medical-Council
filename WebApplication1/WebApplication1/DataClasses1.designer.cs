#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebApplication1
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="TehranMedicalCouncil")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertuserOne(userOne instance);
    partial void UpdateuserOne(userOne instance);
    partial void DeleteuserOne(userOne instance);
    partial void InsertTime_slot(Time_slot instance);
    partial void UpdateTime_slot(Time_slot instance);
    partial void DeleteTime_slot(Time_slot instance);
    partial void InsertTariff(Tariff instance);
    partial void UpdateTariff(Tariff instance);
    partial void DeleteTariff(Tariff instance);
    partial void InsertLaboratory(Laboratory instance);
    partial void UpdateLaboratory(Laboratory instance);
    partial void DeleteLaboratory(Laboratory instance);
    partial void InsertHospital(Hospital instance);
    partial void UpdateHospital(Hospital instance);
    partial void DeleteHospital(Hospital instance);
    partial void InsertDoctor(Doctor instance);
    partial void UpdateDoctor(Doctor instance);
    partial void DeleteDoctor(Doctor instance);
    partial void InsertFaculty(Faculty instance);
    partial void UpdateFaculty(Faculty instance);
    partial void DeleteFaculty(Faculty instance);
    partial void InsertClinic(Clinic instance);
    partial void UpdateClinic(Clinic instance);
    partial void DeleteClinic(Clinic instance);
    partial void InsertCategory(Category instance);
    partial void UpdateCategory(Category instance);
    partial void DeleteCategory(Category instance);
    partial void InsertAddress(Address instance);
    partial void UpdateAddress(Address instance);
    partial void DeleteAddress(Address instance);
    #endregion
		
		public DataClasses1DataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["TehranMedicalCouncilConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<userOne> userOnes
		{
			get
			{
				return this.GetTable<userOne>();
			}
		}
		
		public System.Data.Linq.Table<Time_slot> Time_slots
		{
			get
			{
				return this.GetTable<Time_slot>();
			}
		}
		
		public System.Data.Linq.Table<Tariff> Tariffs
		{
			get
			{
				return this.GetTable<Tariff>();
			}
		}
		
		public System.Data.Linq.Table<Laboratory> Laboratories
		{
			get
			{
				return this.GetTable<Laboratory>();
			}
		}
		
		public System.Data.Linq.Table<Hospital> Hospitals
		{
			get
			{
				return this.GetTable<Hospital>();
			}
		}
		
		public System.Data.Linq.Table<Doctor> Doctors
		{
			get
			{
				return this.GetTable<Doctor>();
			}
		}
		
		public System.Data.Linq.Table<Faculty> Faculties
		{
			get
			{
				return this.GetTable<Faculty>();
			}
		}
		
		public System.Data.Linq.Table<Clinic> Clinics
		{
			get
			{
				return this.GetTable<Clinic>();
			}
		}
		
		public System.Data.Linq.Table<Category> Categories
		{
			get
			{
				return this.GetTable<Category>();
			}
		}
		
		public System.Data.Linq.Table<Address> Addresses
		{
			get
			{
				return this.GetTable<Address>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.userOne")]
	public partial class userOne : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _username;
		
		private string _passwordd;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnusernameChanging(string value);
    partial void OnusernameChanged();
    partial void OnpassworddChanging(string value);
    partial void OnpassworddChanged();
    #endregion
		
		public userOne()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_username", DbType="VarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string username
		{
			get
			{
				return this._username;
			}
			set
			{
				if ((this._username != value))
				{
					this.OnusernameChanging(value);
					this.SendPropertyChanging();
					this._username = value;
					this.SendPropertyChanged("username");
					this.OnusernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_passwordd", DbType="VarChar(4)")]
		public string passwordd
		{
			get
			{
				return this._passwordd;
			}
			set
			{
				if ((this._passwordd != value))
				{
					this.OnpassworddChanging(value);
					this.SendPropertyChanging();
					this._passwordd = value;
					this.SendPropertyChanged("passwordd");
					this.OnpassworddChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Time_slot")]
	public partial class Time_slot : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ID;
		
		private string _day;
		
		private System.Nullable<System.TimeSpan> _start_time;
		
		private System.Nullable<System.TimeSpan> _end_time;
		
		private System.Nullable<System.DateTime> _start_date;
		
		private System.Nullable<System.DateTime> _end_date;
		
		private EntitySet<Category> _Categories;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(string value);
    partial void OnIDChanged();
    partial void OndayChanging(string value);
    partial void OndayChanged();
    partial void Onstart_timeChanging(System.Nullable<System.TimeSpan> value);
    partial void Onstart_timeChanged();
    partial void Onend_timeChanging(System.Nullable<System.TimeSpan> value);
    partial void Onend_timeChanged();
    partial void Onstart_dateChanging(System.Nullable<System.DateTime> value);
    partial void Onstart_dateChanged();
    partial void Onend_dateChanging(System.Nullable<System.DateTime> value);
    partial void Onend_dateChanged();
    #endregion
		
		public Time_slot()
		{
			this._Categories = new EntitySet<Category>(new Action<Category>(this.attach_Categories), new Action<Category>(this.detach_Categories));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="VarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_day", DbType="Char(3)")]
		public string day
		{
			get
			{
				return this._day;
			}
			set
			{
				if ((this._day != value))
				{
					this.OndayChanging(value);
					this.SendPropertyChanging();
					this._day = value;
					this.SendPropertyChanged("day");
					this.OndayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_start_time", DbType="Time")]
		public System.Nullable<System.TimeSpan> start_time
		{
			get
			{
				return this._start_time;
			}
			set
			{
				if ((this._start_time != value))
				{
					this.Onstart_timeChanging(value);
					this.SendPropertyChanging();
					this._start_time = value;
					this.SendPropertyChanged("start_time");
					this.Onstart_timeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_end_time", DbType="Time")]
		public System.Nullable<System.TimeSpan> end_time
		{
			get
			{
				return this._end_time;
			}
			set
			{
				if ((this._end_time != value))
				{
					this.Onend_timeChanging(value);
					this.SendPropertyChanging();
					this._end_time = value;
					this.SendPropertyChanged("end_time");
					this.Onend_timeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_start_date", DbType="Date")]
		public System.Nullable<System.DateTime> start_date
		{
			get
			{
				return this._start_date;
			}
			set
			{
				if ((this._start_date != value))
				{
					this.Onstart_dateChanging(value);
					this.SendPropertyChanging();
					this._start_date = value;
					this.SendPropertyChanged("start_date");
					this.Onstart_dateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_end_date", DbType="Date")]
		public System.Nullable<System.DateTime> end_date
		{
			get
			{
				return this._end_date;
			}
			set
			{
				if ((this._end_date != value))
				{
					this.Onend_dateChanging(value);
					this.SendPropertyChanging();
					this._end_date = value;
					this.SendPropertyChanged("end_date");
					this.Onend_dateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Time_slot_Category", Storage="_Categories", ThisKey="ID", OtherKey="time_slot_id")]
		public EntitySet<Category> Categories
		{
			get
			{
				return this._Categories;
			}
			set
			{
				this._Categories.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Categories(Category entity)
		{
			this.SendPropertyChanging();
			entity.Time_slot = this;
		}
		
		private void detach_Categories(Category entity)
		{
			this.SendPropertyChanging();
			entity.Time_slot = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Tariff")]
	public partial class Tariff : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ID;
		
		private string _type_of_tariff;
		
		private EntitySet<Laboratory> _Laboratories;
		
		private EntitySet<Hospital> _Hospitals;
		
		private EntitySet<Faculty> _Faculties;
		
		private EntitySet<Clinic> _Clinics;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(string value);
    partial void OnIDChanged();
    partial void Ontype_of_tariffChanging(string value);
    partial void Ontype_of_tariffChanged();
    #endregion
		
		public Tariff()
		{
			this._Laboratories = new EntitySet<Laboratory>(new Action<Laboratory>(this.attach_Laboratories), new Action<Laboratory>(this.detach_Laboratories));
			this._Hospitals = new EntitySet<Hospital>(new Action<Hospital>(this.attach_Hospitals), new Action<Hospital>(this.detach_Hospitals));
			this._Faculties = new EntitySet<Faculty>(new Action<Faculty>(this.attach_Faculties), new Action<Faculty>(this.detach_Faculties));
			this._Clinics = new EntitySet<Clinic>(new Action<Clinic>(this.attach_Clinics), new Action<Clinic>(this.detach_Clinics));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="VarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_type_of_tariff", DbType="VarChar(20)")]
		public string type_of_tariff
		{
			get
			{
				return this._type_of_tariff;
			}
			set
			{
				if ((this._type_of_tariff != value))
				{
					this.Ontype_of_tariffChanging(value);
					this.SendPropertyChanging();
					this._type_of_tariff = value;
					this.SendPropertyChanged("type_of_tariff");
					this.Ontype_of_tariffChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tariff_Laboratory", Storage="_Laboratories", ThisKey="ID", OtherKey="tariff_id")]
		public EntitySet<Laboratory> Laboratories
		{
			get
			{
				return this._Laboratories;
			}
			set
			{
				this._Laboratories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tariff_Hospital", Storage="_Hospitals", ThisKey="ID", OtherKey="tariff_id")]
		public EntitySet<Hospital> Hospitals
		{
			get
			{
				return this._Hospitals;
			}
			set
			{
				this._Hospitals.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tariff_Faculty", Storage="_Faculties", ThisKey="ID", OtherKey="tariff_id")]
		public EntitySet<Faculty> Faculties
		{
			get
			{
				return this._Faculties;
			}
			set
			{
				this._Faculties.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tariff_Clinic", Storage="_Clinics", ThisKey="ID", OtherKey="tariff_id")]
		public EntitySet<Clinic> Clinics
		{
			get
			{
				return this._Clinics;
			}
			set
			{
				this._Clinics.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Laboratories(Laboratory entity)
		{
			this.SendPropertyChanging();
			entity.Tariff = this;
		}
		
		private void detach_Laboratories(Laboratory entity)
		{
			this.SendPropertyChanging();
			entity.Tariff = null;
		}
		
		private void attach_Hospitals(Hospital entity)
		{
			this.SendPropertyChanging();
			entity.Tariff = this;
		}
		
		private void detach_Hospitals(Hospital entity)
		{
			this.SendPropertyChanging();
			entity.Tariff = null;
		}
		
		private void attach_Faculties(Faculty entity)
		{
			this.SendPropertyChanging();
			entity.Tariff = this;
		}
		
		private void detach_Faculties(Faculty entity)
		{
			this.SendPropertyChanging();
			entity.Tariff = null;
		}
		
		private void attach_Clinics(Clinic entity)
		{
			this.SendPropertyChanging();
			entity.Tariff = this;
		}
		
		private void detach_Clinics(Clinic entity)
		{
			this.SendPropertyChanging();
			entity.Tariff = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Laboratory")]
	public partial class Laboratory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _name;
		
		private string _field_of_research;
		
		private System.Nullable<int> _doctor_id;
		
		private System.Nullable<int> _address_id;
		
		private string _tariff_id;
		
		private System.Nullable<int> _total_experiment;
		
		private System.Nullable<decimal> _lab_budget;
		
		private System.Nullable<int> _established_year;
		
		private EntityRef<Tariff> _Tariff;
		
		private EntityRef<Doctor> _Doctor;
		
		private EntityRef<Address> _Address;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void Onfield_of_researchChanging(string value);
    partial void Onfield_of_researchChanged();
    partial void Ondoctor_idChanging(System.Nullable<int> value);
    partial void Ondoctor_idChanged();
    partial void Onaddress_idChanging(System.Nullable<int> value);
    partial void Onaddress_idChanged();
    partial void Ontariff_idChanging(string value);
    partial void Ontariff_idChanged();
    partial void Ontotal_experimentChanging(System.Nullable<int> value);
    partial void Ontotal_experimentChanged();
    partial void Onlab_budgetChanging(System.Nullable<decimal> value);
    partial void Onlab_budgetChanged();
    partial void Onestablished_yearChanging(System.Nullable<int> value);
    partial void Onestablished_yearChanged();
    #endregion
		
		public Laboratory()
		{
			this._Tariff = default(EntityRef<Tariff>);
			this._Doctor = default(EntityRef<Doctor>);
			this._Address = default(EntityRef<Address>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_field_of_research", DbType="VarChar(200)")]
		public string field_of_research
		{
			get
			{
				return this._field_of_research;
			}
			set
			{
				if ((this._field_of_research != value))
				{
					this.Onfield_of_researchChanging(value);
					this.SendPropertyChanging();
					this._field_of_research = value;
					this.SendPropertyChanged("field_of_research");
					this.Onfield_of_researchChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_doctor_id", DbType="Int")]
		public System.Nullable<int> doctor_id
		{
			get
			{
				return this._doctor_id;
			}
			set
			{
				if ((this._doctor_id != value))
				{
					if (this._Doctor.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Ondoctor_idChanging(value);
					this.SendPropertyChanging();
					this._doctor_id = value;
					this.SendPropertyChanged("doctor_id");
					this.Ondoctor_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_address_id", DbType="Int")]
		public System.Nullable<int> address_id
		{
			get
			{
				return this._address_id;
			}
			set
			{
				if ((this._address_id != value))
				{
					if (this._Address.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onaddress_idChanging(value);
					this.SendPropertyChanging();
					this._address_id = value;
					this.SendPropertyChanged("address_id");
					this.Onaddress_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_tariff_id", DbType="VarChar(10)")]
		public string tariff_id
		{
			get
			{
				return this._tariff_id;
			}
			set
			{
				if ((this._tariff_id != value))
				{
					if (this._Tariff.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Ontariff_idChanging(value);
					this.SendPropertyChanging();
					this._tariff_id = value;
					this.SendPropertyChanged("tariff_id");
					this.Ontariff_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_total_experiment", DbType="Int")]
		public System.Nullable<int> total_experiment
		{
			get
			{
				return this._total_experiment;
			}
			set
			{
				if ((this._total_experiment != value))
				{
					this.Ontotal_experimentChanging(value);
					this.SendPropertyChanging();
					this._total_experiment = value;
					this.SendPropertyChanged("total_experiment");
					this.Ontotal_experimentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lab_budget", DbType="Money")]
		public System.Nullable<decimal> lab_budget
		{
			get
			{
				return this._lab_budget;
			}
			set
			{
				if ((this._lab_budget != value))
				{
					this.Onlab_budgetChanging(value);
					this.SendPropertyChanging();
					this._lab_budget = value;
					this.SendPropertyChanged("lab_budget");
					this.Onlab_budgetChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_established_year", DbType="Int")]
		public System.Nullable<int> established_year
		{
			get
			{
				return this._established_year;
			}
			set
			{
				if ((this._established_year != value))
				{
					this.Onestablished_yearChanging(value);
					this.SendPropertyChanging();
					this._established_year = value;
					this.SendPropertyChanged("established_year");
					this.Onestablished_yearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tariff_Laboratory", Storage="_Tariff", ThisKey="tariff_id", OtherKey="ID", IsForeignKey=true)]
		public Tariff Tariff
		{
			get
			{
				return this._Tariff.Entity;
			}
			set
			{
				Tariff previousValue = this._Tariff.Entity;
				if (((previousValue != value) 
							|| (this._Tariff.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tariff.Entity = null;
						previousValue.Laboratories.Remove(this);
					}
					this._Tariff.Entity = value;
					if ((value != null))
					{
						value.Laboratories.Add(this);
						this._tariff_id = value.ID;
					}
					else
					{
						this._tariff_id = default(string);
					}
					this.SendPropertyChanged("Tariff");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Doctor_Laboratory", Storage="_Doctor", ThisKey="doctor_id", OtherKey="ID", IsForeignKey=true)]
		public Doctor Doctor
		{
			get
			{
				return this._Doctor.Entity;
			}
			set
			{
				Doctor previousValue = this._Doctor.Entity;
				if (((previousValue != value) 
							|| (this._Doctor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Doctor.Entity = null;
						previousValue.Laboratories.Remove(this);
					}
					this._Doctor.Entity = value;
					if ((value != null))
					{
						value.Laboratories.Add(this);
						this._doctor_id = value.ID;
					}
					else
					{
						this._doctor_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("Doctor");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Address_Laboratory", Storage="_Address", ThisKey="address_id", OtherKey="ID", IsForeignKey=true)]
		public Address Address
		{
			get
			{
				return this._Address.Entity;
			}
			set
			{
				Address previousValue = this._Address.Entity;
				if (((previousValue != value) 
							|| (this._Address.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Address.Entity = null;
						previousValue.Laboratories.Remove(this);
					}
					this._Address.Entity = value;
					if ((value != null))
					{
						value.Laboratories.Add(this);
						this._address_id = value.ID;
					}
					else
					{
						this._address_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("Address");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Hospital")]
	public partial class Hospital : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _name;
		
		private System.Nullable<int> _address_id;
		
		private System.Nullable<int> _doctor_id;
		
		private System.Nullable<int> _category_id;
		
		private System.Nullable<System.TimeSpan> _category_time;
		
		private string _tariff_id;
		
		private System.Nullable<int> _capacity;
		
		private System.Nullable<int> _establishedـyear;
		
		private System.Nullable<decimal> _Hos_budget;
		
		private EntityRef<Tariff> _Tariff;
		
		private EntityRef<Doctor> _Doctor;
		
		private EntityRef<Category> _Category;
		
		private EntityRef<Address> _Address;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void Onaddress_idChanging(System.Nullable<int> value);
    partial void Onaddress_idChanged();
    partial void Ondoctor_idChanging(System.Nullable<int> value);
    partial void Ondoctor_idChanged();
    partial void Oncategory_idChanging(System.Nullable<int> value);
    partial void Oncategory_idChanged();
    partial void Oncategory_timeChanging(System.Nullable<System.TimeSpan> value);
    partial void Oncategory_timeChanged();
    partial void Ontariff_idChanging(string value);
    partial void Ontariff_idChanged();
    partial void OncapacityChanging(System.Nullable<int> value);
    partial void OncapacityChanged();
    partial void OnestablishedـyearChanging(System.Nullable<int> value);
    partial void OnestablishedـyearChanged();
    partial void OnHos_budgetChanging(System.Nullable<decimal> value);
    partial void OnHos_budgetChanged();
    #endregion
		
		public Hospital()
		{
			this._Tariff = default(EntityRef<Tariff>);
			this._Doctor = default(EntityRef<Doctor>);
			this._Category = default(EntityRef<Category>);
			this._Address = default(EntityRef<Address>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_address_id", DbType="Int")]
		public System.Nullable<int> address_id
		{
			get
			{
				return this._address_id;
			}
			set
			{
				if ((this._address_id != value))
				{
					if (this._Address.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onaddress_idChanging(value);
					this.SendPropertyChanging();
					this._address_id = value;
					this.SendPropertyChanged("address_id");
					this.Onaddress_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_doctor_id", DbType="Int")]
		public System.Nullable<int> doctor_id
		{
			get
			{
				return this._doctor_id;
			}
			set
			{
				if ((this._doctor_id != value))
				{
					if (this._Doctor.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Ondoctor_idChanging(value);
					this.SendPropertyChanging();
					this._doctor_id = value;
					this.SendPropertyChanged("doctor_id");
					this.Ondoctor_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_category_id", DbType="Int")]
		public System.Nullable<int> category_id
		{
			get
			{
				return this._category_id;
			}
			set
			{
				if ((this._category_id != value))
				{
					if (this._Category.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Oncategory_idChanging(value);
					this.SendPropertyChanging();
					this._category_id = value;
					this.SendPropertyChanged("category_id");
					this.Oncategory_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_category_time", DbType="Time")]
		public System.Nullable<System.TimeSpan> category_time
		{
			get
			{
				return this._category_time;
			}
			set
			{
				if ((this._category_time != value))
				{
					this.Oncategory_timeChanging(value);
					this.SendPropertyChanging();
					this._category_time = value;
					this.SendPropertyChanged("category_time");
					this.Oncategory_timeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_tariff_id", DbType="VarChar(10)")]
		public string tariff_id
		{
			get
			{
				return this._tariff_id;
			}
			set
			{
				if ((this._tariff_id != value))
				{
					if (this._Tariff.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Ontariff_idChanging(value);
					this.SendPropertyChanging();
					this._tariff_id = value;
					this.SendPropertyChanged("tariff_id");
					this.Ontariff_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_capacity", DbType="Int")]
		public System.Nullable<int> capacity
		{
			get
			{
				return this._capacity;
			}
			set
			{
				if ((this._capacity != value))
				{
					this.OncapacityChanging(value);
					this.SendPropertyChanging();
					this._capacity = value;
					this.SendPropertyChanged("capacity");
					this.OncapacityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_establishedـyear", DbType="Int")]
		public System.Nullable<int> establishedـyear
		{
			get
			{
				return this._establishedـyear;
			}
			set
			{
				if ((this._establishedـyear != value))
				{
					this.OnestablishedـyearChanging(value);
					this.SendPropertyChanging();
					this._establishedـyear = value;
					this.SendPropertyChanged("establishedـyear");
					this.OnestablishedـyearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Hos_budget", DbType="Money")]
		public System.Nullable<decimal> Hos_budget
		{
			get
			{
				return this._Hos_budget;
			}
			set
			{
				if ((this._Hos_budget != value))
				{
					this.OnHos_budgetChanging(value);
					this.SendPropertyChanging();
					this._Hos_budget = value;
					this.SendPropertyChanged("Hos_budget");
					this.OnHos_budgetChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tariff_Hospital", Storage="_Tariff", ThisKey="tariff_id", OtherKey="ID", IsForeignKey=true)]
		public Tariff Tariff
		{
			get
			{
				return this._Tariff.Entity;
			}
			set
			{
				Tariff previousValue = this._Tariff.Entity;
				if (((previousValue != value) 
							|| (this._Tariff.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tariff.Entity = null;
						previousValue.Hospitals.Remove(this);
					}
					this._Tariff.Entity = value;
					if ((value != null))
					{
						value.Hospitals.Add(this);
						this._tariff_id = value.ID;
					}
					else
					{
						this._tariff_id = default(string);
					}
					this.SendPropertyChanged("Tariff");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Doctor_Hospital", Storage="_Doctor", ThisKey="doctor_id", OtherKey="ID", IsForeignKey=true)]
		public Doctor Doctor
		{
			get
			{
				return this._Doctor.Entity;
			}
			set
			{
				Doctor previousValue = this._Doctor.Entity;
				if (((previousValue != value) 
							|| (this._Doctor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Doctor.Entity = null;
						previousValue.Hospitals.Remove(this);
					}
					this._Doctor.Entity = value;
					if ((value != null))
					{
						value.Hospitals.Add(this);
						this._doctor_id = value.ID;
					}
					else
					{
						this._doctor_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("Doctor");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_Hospital", Storage="_Category", ThisKey="category_id", OtherKey="ID", IsForeignKey=true)]
		public Category Category
		{
			get
			{
				return this._Category.Entity;
			}
			set
			{
				Category previousValue = this._Category.Entity;
				if (((previousValue != value) 
							|| (this._Category.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Category.Entity = null;
						previousValue.Hospitals.Remove(this);
					}
					this._Category.Entity = value;
					if ((value != null))
					{
						value.Hospitals.Add(this);
						this._category_id = value.ID;
					}
					else
					{
						this._category_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("Category");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Address_Hospital", Storage="_Address", ThisKey="address_id", OtherKey="ID", IsForeignKey=true)]
		public Address Address
		{
			get
			{
				return this._Address.Entity;
			}
			set
			{
				Address previousValue = this._Address.Entity;
				if (((previousValue != value) 
							|| (this._Address.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Address.Entity = null;
						previousValue.Hospitals.Remove(this);
					}
					this._Address.Entity = value;
					if ((value != null))
					{
						value.Hospitals.Add(this);
						this._address_id = value.ID;
					}
					else
					{
						this._address_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("Address");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Doctor")]
	public partial class Doctor : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _first_name;
		
		private string _last_name;
		
		private int _ID;
		
		private string _faculty;
		
		private System.Nullable<decimal> _salary;
		
		private System.Nullable<int> _grade;
		
		private EntitySet<Laboratory> _Laboratories;
		
		private EntitySet<Hospital> _Hospitals;
		
		private EntitySet<Faculty> _Faculties;
		
		private EntitySet<Clinic> _Clinics;
		
		private EntitySet<Category> _Categories;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onfirst_nameChanging(string value);
    partial void Onfirst_nameChanged();
    partial void Onlast_nameChanging(string value);
    partial void Onlast_nameChanged();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnfacultyChanging(string value);
    partial void OnfacultyChanged();
    partial void OnsalaryChanging(System.Nullable<decimal> value);
    partial void OnsalaryChanged();
    partial void OngradeChanging(System.Nullable<int> value);
    partial void OngradeChanged();
    #endregion
		
		public Doctor()
		{
			this._Laboratories = new EntitySet<Laboratory>(new Action<Laboratory>(this.attach_Laboratories), new Action<Laboratory>(this.detach_Laboratories));
			this._Hospitals = new EntitySet<Hospital>(new Action<Hospital>(this.attach_Hospitals), new Action<Hospital>(this.detach_Hospitals));
			this._Faculties = new EntitySet<Faculty>(new Action<Faculty>(this.attach_Faculties), new Action<Faculty>(this.detach_Faculties));
			this._Clinics = new EntitySet<Clinic>(new Action<Clinic>(this.attach_Clinics), new Action<Clinic>(this.detach_Clinics));
			this._Categories = new EntitySet<Category>(new Action<Category>(this.attach_Categories), new Action<Category>(this.detach_Categories));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_first_name", DbType="VarChar(50)")]
		public string first_name
		{
			get
			{
				return this._first_name;
			}
			set
			{
				if ((this._first_name != value))
				{
					this.Onfirst_nameChanging(value);
					this.SendPropertyChanging();
					this._first_name = value;
					this.SendPropertyChanged("first_name");
					this.Onfirst_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_last_name", DbType="VarChar(50)")]
		public string last_name
		{
			get
			{
				return this._last_name;
			}
			set
			{
				if ((this._last_name != value))
				{
					this.Onlast_nameChanging(value);
					this.SendPropertyChanging();
					this._last_name = value;
					this.SendPropertyChanged("last_name");
					this.Onlast_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_faculty", DbType="VarChar(50)")]
		public string faculty
		{
			get
			{
				return this._faculty;
			}
			set
			{
				if ((this._faculty != value))
				{
					this.OnfacultyChanging(value);
					this.SendPropertyChanging();
					this._faculty = value;
					this.SendPropertyChanged("faculty");
					this.OnfacultyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_salary", DbType="Money")]
		public System.Nullable<decimal> salary
		{
			get
			{
				return this._salary;
			}
			set
			{
				if ((this._salary != value))
				{
					this.OnsalaryChanging(value);
					this.SendPropertyChanging();
					this._salary = value;
					this.SendPropertyChanged("salary");
					this.OnsalaryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_grade", DbType="Int")]
		public System.Nullable<int> grade
		{
			get
			{
				return this._grade;
			}
			set
			{
				if ((this._grade != value))
				{
					this.OngradeChanging(value);
					this.SendPropertyChanging();
					this._grade = value;
					this.SendPropertyChanged("grade");
					this.OngradeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Doctor_Laboratory", Storage="_Laboratories", ThisKey="ID", OtherKey="doctor_id")]
		public EntitySet<Laboratory> Laboratories
		{
			get
			{
				return this._Laboratories;
			}
			set
			{
				this._Laboratories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Doctor_Hospital", Storage="_Hospitals", ThisKey="ID", OtherKey="doctor_id")]
		public EntitySet<Hospital> Hospitals
		{
			get
			{
				return this._Hospitals;
			}
			set
			{
				this._Hospitals.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Doctor_Faculty", Storage="_Faculties", ThisKey="ID", OtherKey="doctor_id")]
		public EntitySet<Faculty> Faculties
		{
			get
			{
				return this._Faculties;
			}
			set
			{
				this._Faculties.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Doctor_Clinic", Storage="_Clinics", ThisKey="ID", OtherKey="doctor_id")]
		public EntitySet<Clinic> Clinics
		{
			get
			{
				return this._Clinics;
			}
			set
			{
				this._Clinics.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Doctor_Category", Storage="_Categories", ThisKey="ID", OtherKey="doctor_id")]
		public EntitySet<Category> Categories
		{
			get
			{
				return this._Categories;
			}
			set
			{
				this._Categories.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Laboratories(Laboratory entity)
		{
			this.SendPropertyChanging();
			entity.Doctor = this;
		}
		
		private void detach_Laboratories(Laboratory entity)
		{
			this.SendPropertyChanging();
			entity.Doctor = null;
		}
		
		private void attach_Hospitals(Hospital entity)
		{
			this.SendPropertyChanging();
			entity.Doctor = this;
		}
		
		private void detach_Hospitals(Hospital entity)
		{
			this.SendPropertyChanging();
			entity.Doctor = null;
		}
		
		private void attach_Faculties(Faculty entity)
		{
			this.SendPropertyChanging();
			entity.Doctor = this;
		}
		
		private void detach_Faculties(Faculty entity)
		{
			this.SendPropertyChanging();
			entity.Doctor = null;
		}
		
		private void attach_Clinics(Clinic entity)
		{
			this.SendPropertyChanging();
			entity.Doctor = this;
		}
		
		private void detach_Clinics(Clinic entity)
		{
			this.SendPropertyChanging();
			entity.Doctor = null;
		}
		
		private void attach_Categories(Category entity)
		{
			this.SendPropertyChanging();
			entity.Doctor = this;
		}
		
		private void detach_Categories(Category entity)
		{
			this.SendPropertyChanging();
			entity.Doctor = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Faculty")]
	public partial class Faculty : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _university_name;
		
		private string _university_id;
		
		private string _university_adr;
		
		private System.Nullable<int> _doctor_id;
		
		private string _tariff_id;
		
		private EntityRef<Doctor> _Doctor;
		
		private EntityRef<Tariff> _Tariff;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onuniversity_nameChanging(string value);
    partial void Onuniversity_nameChanged();
    partial void Onuniversity_idChanging(string value);
    partial void Onuniversity_idChanged();
    partial void Onuniversity_adrChanging(string value);
    partial void Onuniversity_adrChanged();
    partial void Ondoctor_idChanging(System.Nullable<int> value);
    partial void Ondoctor_idChanged();
    partial void Ontariff_idChanging(string value);
    partial void Ontariff_idChanged();
    #endregion
		
		public Faculty()
		{
			this._Doctor = default(EntityRef<Doctor>);
			this._Tariff = default(EntityRef<Tariff>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_university_name", DbType="VarChar(50)")]
		public string university_name
		{
			get
			{
				return this._university_name;
			}
			set
			{
				if ((this._university_name != value))
				{
					this.Onuniversity_nameChanging(value);
					this.SendPropertyChanging();
					this._university_name = value;
					this.SendPropertyChanged("university_name");
					this.Onuniversity_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_university_id", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string university_id
		{
			get
			{
				return this._university_id;
			}
			set
			{
				if ((this._university_id != value))
				{
					this.Onuniversity_idChanging(value);
					this.SendPropertyChanging();
					this._university_id = value;
					this.SendPropertyChanged("university_id");
					this.Onuniversity_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_university_adr", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string university_adr
		{
			get
			{
				return this._university_adr;
			}
			set
			{
				if ((this._university_adr != value))
				{
					this.Onuniversity_adrChanging(value);
					this.SendPropertyChanging();
					this._university_adr = value;
					this.SendPropertyChanged("university_adr");
					this.Onuniversity_adrChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_doctor_id", DbType="Int")]
		public System.Nullable<int> doctor_id
		{
			get
			{
				return this._doctor_id;
			}
			set
			{
				if ((this._doctor_id != value))
				{
					if (this._Doctor.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Ondoctor_idChanging(value);
					this.SendPropertyChanging();
					this._doctor_id = value;
					this.SendPropertyChanged("doctor_id");
					this.Ondoctor_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_tariff_id", DbType="VarChar(10)")]
		public string tariff_id
		{
			get
			{
				return this._tariff_id;
			}
			set
			{
				if ((this._tariff_id != value))
				{
					if (this._Tariff.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Ontariff_idChanging(value);
					this.SendPropertyChanging();
					this._tariff_id = value;
					this.SendPropertyChanged("tariff_id");
					this.Ontariff_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Doctor_Faculty", Storage="_Doctor", ThisKey="doctor_id", OtherKey="ID", IsForeignKey=true)]
		public Doctor Doctor
		{
			get
			{
				return this._Doctor.Entity;
			}
			set
			{
				Doctor previousValue = this._Doctor.Entity;
				if (((previousValue != value) 
							|| (this._Doctor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Doctor.Entity = null;
						previousValue.Faculties.Remove(this);
					}
					this._Doctor.Entity = value;
					if ((value != null))
					{
						value.Faculties.Add(this);
						this._doctor_id = value.ID;
					}
					else
					{
						this._doctor_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("Doctor");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tariff_Faculty", Storage="_Tariff", ThisKey="tariff_id", OtherKey="ID", IsForeignKey=true)]
		public Tariff Tariff
		{
			get
			{
				return this._Tariff.Entity;
			}
			set
			{
				Tariff previousValue = this._Tariff.Entity;
				if (((previousValue != value) 
							|| (this._Tariff.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tariff.Entity = null;
						previousValue.Faculties.Remove(this);
					}
					this._Tariff.Entity = value;
					if ((value != null))
					{
						value.Faculties.Add(this);
						this._tariff_id = value.ID;
					}
					else
					{
						this._tariff_id = default(string);
					}
					this.SendPropertyChanged("Tariff");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Clinic")]
	public partial class Clinic : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _name;
		
		private System.Nullable<int> _address_id;
		
		private System.Nullable<int> _doctor_id;
		
		private System.Nullable<int> _category_id;
		
		private System.Nullable<System.TimeSpan> _category_time;
		
		private string _tariff_id;
		
		private System.Nullable<int> _capacity;
		
		private System.Nullable<int> _establishedـyear;
		
		private System.Nullable<decimal> _cil_budget;
		
		private EntityRef<Doctor> _Doctor;
		
		private EntityRef<Tariff> _Tariff;
		
		private EntityRef<Category> _Category;
		
		private EntityRef<Address> _Address;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void Onaddress_idChanging(System.Nullable<int> value);
    partial void Onaddress_idChanged();
    partial void Ondoctor_idChanging(System.Nullable<int> value);
    partial void Ondoctor_idChanged();
    partial void Oncategory_idChanging(System.Nullable<int> value);
    partial void Oncategory_idChanged();
    partial void Oncategory_timeChanging(System.Nullable<System.TimeSpan> value);
    partial void Oncategory_timeChanged();
    partial void Ontariff_idChanging(string value);
    partial void Ontariff_idChanged();
    partial void OncapacityChanging(System.Nullable<int> value);
    partial void OncapacityChanged();
    partial void OnestablishedـyearChanging(System.Nullable<int> value);
    partial void OnestablishedـyearChanged();
    partial void Oncil_budgetChanging(System.Nullable<decimal> value);
    partial void Oncil_budgetChanged();
    #endregion
		
		public Clinic()
		{
			this._Doctor = default(EntityRef<Doctor>);
			this._Tariff = default(EntityRef<Tariff>);
			this._Category = default(EntityRef<Category>);
			this._Address = default(EntityRef<Address>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_address_id", DbType="Int")]
		public System.Nullable<int> address_id
		{
			get
			{
				return this._address_id;
			}
			set
			{
				if ((this._address_id != value))
				{
					if (this._Address.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onaddress_idChanging(value);
					this.SendPropertyChanging();
					this._address_id = value;
					this.SendPropertyChanged("address_id");
					this.Onaddress_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_doctor_id", DbType="Int")]
		public System.Nullable<int> doctor_id
		{
			get
			{
				return this._doctor_id;
			}
			set
			{
				if ((this._doctor_id != value))
				{
					if (this._Doctor.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Ondoctor_idChanging(value);
					this.SendPropertyChanging();
					this._doctor_id = value;
					this.SendPropertyChanged("doctor_id");
					this.Ondoctor_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_category_id", DbType="Int")]
		public System.Nullable<int> category_id
		{
			get
			{
				return this._category_id;
			}
			set
			{
				if ((this._category_id != value))
				{
					if (this._Category.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Oncategory_idChanging(value);
					this.SendPropertyChanging();
					this._category_id = value;
					this.SendPropertyChanged("category_id");
					this.Oncategory_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_category_time", DbType="Time")]
		public System.Nullable<System.TimeSpan> category_time
		{
			get
			{
				return this._category_time;
			}
			set
			{
				if ((this._category_time != value))
				{
					this.Oncategory_timeChanging(value);
					this.SendPropertyChanging();
					this._category_time = value;
					this.SendPropertyChanged("category_time");
					this.Oncategory_timeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_tariff_id", DbType="VarChar(10)")]
		public string tariff_id
		{
			get
			{
				return this._tariff_id;
			}
			set
			{
				if ((this._tariff_id != value))
				{
					if (this._Tariff.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Ontariff_idChanging(value);
					this.SendPropertyChanging();
					this._tariff_id = value;
					this.SendPropertyChanged("tariff_id");
					this.Ontariff_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_capacity", DbType="Int")]
		public System.Nullable<int> capacity
		{
			get
			{
				return this._capacity;
			}
			set
			{
				if ((this._capacity != value))
				{
					this.OncapacityChanging(value);
					this.SendPropertyChanging();
					this._capacity = value;
					this.SendPropertyChanged("capacity");
					this.OncapacityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_establishedـyear", DbType="Int")]
		public System.Nullable<int> establishedـyear
		{
			get
			{
				return this._establishedـyear;
			}
			set
			{
				if ((this._establishedـyear != value))
				{
					this.OnestablishedـyearChanging(value);
					this.SendPropertyChanging();
					this._establishedـyear = value;
					this.SendPropertyChanged("establishedـyear");
					this.OnestablishedـyearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cil_budget", DbType="Money")]
		public System.Nullable<decimal> cil_budget
		{
			get
			{
				return this._cil_budget;
			}
			set
			{
				if ((this._cil_budget != value))
				{
					this.Oncil_budgetChanging(value);
					this.SendPropertyChanging();
					this._cil_budget = value;
					this.SendPropertyChanged("cil_budget");
					this.Oncil_budgetChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Doctor_Clinic", Storage="_Doctor", ThisKey="doctor_id", OtherKey="ID", IsForeignKey=true)]
		public Doctor Doctor
		{
			get
			{
				return this._Doctor.Entity;
			}
			set
			{
				Doctor previousValue = this._Doctor.Entity;
				if (((previousValue != value) 
							|| (this._Doctor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Doctor.Entity = null;
						previousValue.Clinics.Remove(this);
					}
					this._Doctor.Entity = value;
					if ((value != null))
					{
						value.Clinics.Add(this);
						this._doctor_id = value.ID;
					}
					else
					{
						this._doctor_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("Doctor");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tariff_Clinic", Storage="_Tariff", ThisKey="tariff_id", OtherKey="ID", IsForeignKey=true)]
		public Tariff Tariff
		{
			get
			{
				return this._Tariff.Entity;
			}
			set
			{
				Tariff previousValue = this._Tariff.Entity;
				if (((previousValue != value) 
							|| (this._Tariff.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tariff.Entity = null;
						previousValue.Clinics.Remove(this);
					}
					this._Tariff.Entity = value;
					if ((value != null))
					{
						value.Clinics.Add(this);
						this._tariff_id = value.ID;
					}
					else
					{
						this._tariff_id = default(string);
					}
					this.SendPropertyChanged("Tariff");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_Clinic", Storage="_Category", ThisKey="category_id", OtherKey="ID", IsForeignKey=true)]
		public Category Category
		{
			get
			{
				return this._Category.Entity;
			}
			set
			{
				Category previousValue = this._Category.Entity;
				if (((previousValue != value) 
							|| (this._Category.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Category.Entity = null;
						previousValue.Clinics.Remove(this);
					}
					this._Category.Entity = value;
					if ((value != null))
					{
						value.Clinics.Add(this);
						this._category_id = value.ID;
					}
					else
					{
						this._category_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("Category");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Address_Clinic", Storage="_Address", ThisKey="address_id", OtherKey="ID", IsForeignKey=true)]
		public Address Address
		{
			get
			{
				return this._Address.Entity;
			}
			set
			{
				Address previousValue = this._Address.Entity;
				if (((previousValue != value) 
							|| (this._Address.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Address.Entity = null;
						previousValue.Clinics.Remove(this);
					}
					this._Address.Entity = value;
					if ((value != null))
					{
						value.Clinics.Add(this);
						this._address_id = value.ID;
					}
					else
					{
						this._address_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("Address");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Category")]
	public partial class Category : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _time_slot_id;
		
		private System.Nullable<int> _doctor_id;
		
		private string _cat_name;
		
		private EntitySet<Hospital> _Hospitals;
		
		private EntitySet<Clinic> _Clinics;
		
		private EntityRef<Doctor> _Doctor;
		
		private EntityRef<Time_slot> _Time_slot;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void Ontime_slot_idChanging(string value);
    partial void Ontime_slot_idChanged();
    partial void Ondoctor_idChanging(System.Nullable<int> value);
    partial void Ondoctor_idChanged();
    partial void Oncat_nameChanging(string value);
    partial void Oncat_nameChanged();
    #endregion
		
		public Category()
		{
			this._Hospitals = new EntitySet<Hospital>(new Action<Hospital>(this.attach_Hospitals), new Action<Hospital>(this.detach_Hospitals));
			this._Clinics = new EntitySet<Clinic>(new Action<Clinic>(this.attach_Clinics), new Action<Clinic>(this.detach_Clinics));
			this._Doctor = default(EntityRef<Doctor>);
			this._Time_slot = default(EntityRef<Time_slot>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_time_slot_id", DbType="VarChar(20)")]
		public string time_slot_id
		{
			get
			{
				return this._time_slot_id;
			}
			set
			{
				if ((this._time_slot_id != value))
				{
					if (this._Time_slot.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Ontime_slot_idChanging(value);
					this.SendPropertyChanging();
					this._time_slot_id = value;
					this.SendPropertyChanged("time_slot_id");
					this.Ontime_slot_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_doctor_id", DbType="Int")]
		public System.Nullable<int> doctor_id
		{
			get
			{
				return this._doctor_id;
			}
			set
			{
				if ((this._doctor_id != value))
				{
					if (this._Doctor.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Ondoctor_idChanging(value);
					this.SendPropertyChanging();
					this._doctor_id = value;
					this.SendPropertyChanged("doctor_id");
					this.Ondoctor_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cat_name", DbType="VarChar(100)")]
		public string cat_name
		{
			get
			{
				return this._cat_name;
			}
			set
			{
				if ((this._cat_name != value))
				{
					this.Oncat_nameChanging(value);
					this.SendPropertyChanging();
					this._cat_name = value;
					this.SendPropertyChanged("cat_name");
					this.Oncat_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_Hospital", Storage="_Hospitals", ThisKey="ID", OtherKey="category_id")]
		public EntitySet<Hospital> Hospitals
		{
			get
			{
				return this._Hospitals;
			}
			set
			{
				this._Hospitals.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_Clinic", Storage="_Clinics", ThisKey="ID", OtherKey="category_id")]
		public EntitySet<Clinic> Clinics
		{
			get
			{
				return this._Clinics;
			}
			set
			{
				this._Clinics.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Doctor_Category", Storage="_Doctor", ThisKey="doctor_id", OtherKey="ID", IsForeignKey=true)]
		public Doctor Doctor
		{
			get
			{
				return this._Doctor.Entity;
			}
			set
			{
				Doctor previousValue = this._Doctor.Entity;
				if (((previousValue != value) 
							|| (this._Doctor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Doctor.Entity = null;
						previousValue.Categories.Remove(this);
					}
					this._Doctor.Entity = value;
					if ((value != null))
					{
						value.Categories.Add(this);
						this._doctor_id = value.ID;
					}
					else
					{
						this._doctor_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("Doctor");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Time_slot_Category", Storage="_Time_slot", ThisKey="time_slot_id", OtherKey="ID", IsForeignKey=true)]
		public Time_slot Time_slot
		{
			get
			{
				return this._Time_slot.Entity;
			}
			set
			{
				Time_slot previousValue = this._Time_slot.Entity;
				if (((previousValue != value) 
							|| (this._Time_slot.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Time_slot.Entity = null;
						previousValue.Categories.Remove(this);
					}
					this._Time_slot.Entity = value;
					if ((value != null))
					{
						value.Categories.Add(this);
						this._time_slot_id = value.ID;
					}
					else
					{
						this._time_slot_id = default(string);
					}
					this.SendPropertyChanged("Time_slot");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Hospitals(Hospital entity)
		{
			this.SendPropertyChanging();
			entity.Category = this;
		}
		
		private void detach_Hospitals(Hospital entity)
		{
			this.SendPropertyChanging();
			entity.Category = null;
		}
		
		private void attach_Clinics(Clinic entity)
		{
			this.SendPropertyChanging();
			entity.Category = this;
		}
		
		private void detach_Clinics(Clinic entity)
		{
			this.SendPropertyChanging();
			entity.Category = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Address")]
	public partial class Address : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _address1;
		
		private string _address2;
		
		private int _ID;
		
		private string _district;
		
		private string _postal_code;
		
		private string _phone;
		
		private System.Nullable<System.DateTime> _last_update;
		
		private EntitySet<Laboratory> _Laboratories;
		
		private EntitySet<Hospital> _Hospitals;
		
		private EntitySet<Clinic> _Clinics;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onaddress1Changing(string value);
    partial void Onaddress1Changed();
    partial void Onaddress2Changing(string value);
    partial void Onaddress2Changed();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OndistrictChanging(string value);
    partial void OndistrictChanged();
    partial void Onpostal_codeChanging(string value);
    partial void Onpostal_codeChanged();
    partial void OnphoneChanging(string value);
    partial void OnphoneChanged();
    partial void Onlast_updateChanging(System.Nullable<System.DateTime> value);
    partial void Onlast_updateChanged();
    #endregion
		
		public Address()
		{
			this._Laboratories = new EntitySet<Laboratory>(new Action<Laboratory>(this.attach_Laboratories), new Action<Laboratory>(this.detach_Laboratories));
			this._Hospitals = new EntitySet<Hospital>(new Action<Hospital>(this.attach_Hospitals), new Action<Hospital>(this.detach_Hospitals));
			this._Clinics = new EntitySet<Clinic>(new Action<Clinic>(this.attach_Clinics), new Action<Clinic>(this.detach_Clinics));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="address", Storage="_address1", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string address1
		{
			get
			{
				return this._address1;
			}
			set
			{
				if ((this._address1 != value))
				{
					this.Onaddress1Changing(value);
					this.SendPropertyChanging();
					this._address1 = value;
					this.SendPropertyChanged("address1");
					this.Onaddress1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_address2", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string address2
		{
			get
			{
				return this._address2;
			}
			set
			{
				if ((this._address2 != value))
				{
					this.Onaddress2Changing(value);
					this.SendPropertyChanging();
					this._address2 = value;
					this.SendPropertyChanged("address2");
					this.Onaddress2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_district", DbType="VarChar(30)")]
		public string district
		{
			get
			{
				return this._district;
			}
			set
			{
				if ((this._district != value))
				{
					this.OndistrictChanging(value);
					this.SendPropertyChanging();
					this._district = value;
					this.SendPropertyChanged("district");
					this.OndistrictChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_postal_code", DbType="VarChar(20)")]
		public string postal_code
		{
			get
			{
				return this._postal_code;
			}
			set
			{
				if ((this._postal_code != value))
				{
					this.Onpostal_codeChanging(value);
					this.SendPropertyChanging();
					this._postal_code = value;
					this.SendPropertyChanged("postal_code");
					this.Onpostal_codeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_phone", DbType="VarChar(20)")]
		public string phone
		{
			get
			{
				return this._phone;
			}
			set
			{
				if ((this._phone != value))
				{
					this.OnphoneChanging(value);
					this.SendPropertyChanging();
					this._phone = value;
					this.SendPropertyChanged("phone");
					this.OnphoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_last_update", DbType="DateTime")]
		public System.Nullable<System.DateTime> last_update
		{
			get
			{
				return this._last_update;
			}
			set
			{
				if ((this._last_update != value))
				{
					this.Onlast_updateChanging(value);
					this.SendPropertyChanging();
					this._last_update = value;
					this.SendPropertyChanged("last_update");
					this.Onlast_updateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Address_Laboratory", Storage="_Laboratories", ThisKey="ID", OtherKey="address_id")]
		public EntitySet<Laboratory> Laboratories
		{
			get
			{
				return this._Laboratories;
			}
			set
			{
				this._Laboratories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Address_Hospital", Storage="_Hospitals", ThisKey="ID", OtherKey="address_id")]
		public EntitySet<Hospital> Hospitals
		{
			get
			{
				return this._Hospitals;
			}
			set
			{
				this._Hospitals.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Address_Clinic", Storage="_Clinics", ThisKey="ID", OtherKey="address_id")]
		public EntitySet<Clinic> Clinics
		{
			get
			{
				return this._Clinics;
			}
			set
			{
				this._Clinics.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Laboratories(Laboratory entity)
		{
			this.SendPropertyChanging();
			entity.Address = this;
		}
		
		private void detach_Laboratories(Laboratory entity)
		{
			this.SendPropertyChanging();
			entity.Address = null;
		}
		
		private void attach_Hospitals(Hospital entity)
		{
			this.SendPropertyChanging();
			entity.Address = this;
		}
		
		private void detach_Hospitals(Hospital entity)
		{
			this.SendPropertyChanging();
			entity.Address = null;
		}
		
		private void attach_Clinics(Clinic entity)
		{
			this.SendPropertyChanging();
			entity.Address = this;
		}
		
		private void detach_Clinics(Clinic entity)
		{
			this.SendPropertyChanging();
			entity.Address = null;
		}
	}
}
#pragma warning restore 1591
